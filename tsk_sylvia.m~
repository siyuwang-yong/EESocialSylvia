classdef tsk_sylvia < exp_psychtoolbox
    properties
        iStr
        ev
        bL
        bR
        bL2
        bR2
        pgb
        pgb2
        keylist
        ks
        game
        datadir
        is2
    end
    methods
        function obj = tsk_sylvia(datadir, is2)
            obj.setup_window;
            obj.datadir = datadir;
            
            if ~exist(datadir)
                mkdir(datadir);
            end
            obj.is2 = is2;
            pgb = progressbar;
            pgb.setup(obj.window, 0.8, 0.03, 0.1) ;
            pgb2 = progressbar;
            pgb2.setup(obj.window, 0.8, 0.03, 0.9        );
            obj.pgb = pgb;
            obj.pgb2 = pgb2;
            obj.set_bandit;
            obj.keylist = [KbName('leftarrow'), KbName('rightarrow')];
            obj.ks = {'left', 'right'};
        end
        function run_exp(obj)
            flag = true;
            obj.pgb.flush(300);
            obj.pgb2.flush(300);
            obj.instructions;
            ngame = 10;
            ntrial = 20;
            for gi = 1:ngame
                obj.rungame(ntrial);
                game = obj.game;
                filename = 'test';
                save(fullfile(obj.datadir,filename), 'game');
            end
        end
        function set_bandit(obj)
            w = 80 * obj.window.scalefactor;
            h = 60 * obj.window.scalefactor;
            w_lever = 80 * obj.window.scalefactor;
            h_lever = 60 * obj.window.scalefactor;
            pos_lever = 1;
            penwidth = 5 * obj.window.scalefactor;
            dotradius = 30 * obj.window.scalefactor;
            font_bandit = round(40 * obj.window.scalefactor);
            bandit_color = {[0 255 255], [0 255 255]}; %
            bL = bandit(obj.window);
            bL.setup(w,h,w_lever,h_lever,pos_lever,penwidth,dotradius,1,'left', font_bandit, bandit_color);
            bR = bandit(obj.window);
            bR.setup(w,h,w_lever,h_lever,pos_lever,penwidth,dotradius,1,'right', font_bandit, bandit_color);
            bandit_color = {[0 255 0], [0 255 0]}; %
            bL2 = bandit(obj.window);
            bL2.setup(w,h,w_lever,h_lever,pos_lever,penwidth,dotradius,1,'left', font_bandit, bandit_color);
            bR2 = bandit(obj.window);
            bR2.setup(w,h,w_lever,h_lever,pos_lever,penwidth,dotradius,1,'right', font_bandit, bandit_color);
            bL.settppos(0.3, 0.3);
            bR.settppos(0.7, 0.3);
            bL2.settppos(0.3, 0.7);
            bR2.settppos(0.7, 0.7);
            obj.bL = bL;
            obj.bR = bR;
            obj.bL2 = bL2;
            obj.bR2 = bR2;
        end
        function out = rungame(obj, ntrial)
            for i = 1:ntrial
                obj.runtrial(i);
            end
        end
        function runtrial(obj, i)
            pgb = obj.pgb;
            pgb2 = obj.pgb2;
            bL = obj.bL;
            bR = obj.bR;
            bL2 = obj.bL2;
            bR2 = obj.bR2;
            r = obj.game.r;
            rt = obj.game.rt;
            r = obj.game.r;
            r = obj.game.r;
            r = obj.game.r;
            rt(i) = NaN;
            flag = true;
            % reward setting for this game
            if flag
                flag = false;
                obj.talkAndflip('New Game');
                WaitSecs(1.0);
                exploitside(i) = ceil(rand*2);
                r(i,1) = round(rand * 100);
                r(i,2) = round(rand * 100);
            else
                if r(i-1, exploitside(i-1)) >= r(i-1, 3-exploitside(i-1)) || ...
                        (exploitside(i-1) == k1(i-1) && exploitside(i-1) == k2(i-1))
                    exploitside(i) = exploitside(i-1);
                    r(i, exploitside(i)) = r(i-1, exploitside(i));
                    r(i, 3-exploitside(i)) = round(rand * 100);
                else
                    exploitside(i) = 3 - exploitside(i-1);
                    r(i, exploitside(i)) = r(i-1, exploitside(i));
                    r(i, 3-exploitside(i)) = round(rand * 100);
                end
                if rand < 0.1
                    flag = true;
                end
            end
            % reset bandit
            bL.flush;
            bR.flush;
            bL2.flush;
            bR2.flush;
            bL.color_highlight = obj.color.AZcactus;
            bR.color_highlight = obj.color.AZcactus ;
            bL2.color_highlight = obj.color.AZcactus;
            bR2.color_highlight = obj.color.AZcactus;
            
            bL.color = obj.color.lightblue;
            bR.color = obj.color.lightblue;
            bL2.color = obj.color.AZriver;
            bR2.color = obj.color.AZriver;
            
            % draw bandit
            if exploitside(i) == 1
                bL.addreward(num2str(r(i,1)));
                bR.addreward('??');
                bL2.addreward(num2str(r(i,1)));
                bR2.addreward('??');
            else
                bR.addreward(num2str(r(i,2)));
                bL.addreward('??');
                bR2.addreward(num2str(r(i,2)  ));
                bL2.addreward('??');
            end
            bL.draw(0,'forced');
            bR.draw(0,'forced');
            bL2.draw(0,'forced');
            bR2.draw(0,'forced');
            pgb.draw;
            pgb2.draw;
            obj.talk('your choice', 'arbitrary', 20, [0, 0.11]);
            obj.talk('your rivals choice', 'arbitrary', 20, [0, 0.91]);
            obj.flip;
            
            % key press
            [~,~,~,k1(i)] = obj.waitForInputrelease(obj.keylist);
            if k1(i) == 1
                bL.color_highlight = [0 0 255];
                bL.draw(1,'forced');
                bR.draw(0);
                bL.addreward(num2str(r(i,1)));
                
                if k1(i) == exploitside(i)
                    bR.addreward('XX');
                end
            else
                bL.draw(0);
                bR.color_highlight = [0 0 255];
                bR.draw(1,'forced');
                bR.addreward(num2str(r(i,2)));
                
                if k1(i) == exploitside(i)
                    bL.addreward('XX');
                end
            end
            pgb.draw;
            pgb2.draw;
            bL2.draw(0,'forced');
            bR2.draw(0,'forced');
            obj.talk('waiting for your rival''s choice', 'arbitrary', 20, [0, 0.6]);
            obj.flip;
            WaitSecs(1.0);
            
            % draw reward
            if obj.is2
                fwrite(uS, k1(i));
                k2(i) = fread(uR);
            else
                k2(i) = ceil(rand*2);
                
            end
            if k1(i) == 1
                bL.draw(1,'forced');
                bR.draw(0);
            else
                bL.draw(0);
                bR.draw(1,'forced');
            end
            if k2(i) == 1
                bL2.addreward(num2str(r(i,1)));
                bL2.color_highlight = [0 0 255];
                
                if k2(i) == exploitside(i)
                    bR2.addreward('XX');
                end
                bL2.draw(1,'forced');
                bR2.draw(0);
            else
                bR2.addreward(num2str(r(i,2)));
                bR2.color_highlight = [0 0 255];
                
                if k2(i) == exploitside(i)
                    bL2.addreward('XX');
                end
                bL2.draw(0);
                bR2.draw(1,'forced');
            end
            pgb.add(r(i,k1(i)));
            pgb2.add(r(i,k2(i)));
            pgb.draw;
            pgb2.draw;
            obj.flip;
            [~,~,~,x] = obj.waitForInputrelease(KbName('space'));
            pgb.update;
            
            out.exploitside = exploitside;
            out.k1 = k1;
            out.k2 = k2;
            out.r = r;
            out.rt = rt;
        end
        function instructions(obj)
            pgb = obj.pgb;
            pgb2 = obj.pgb2;
            [ev, iStr] = obj.instructionList;
            endFlag = false;
            count = 1;
            while ~endFlag
                [A, B] = Screen('WindowSize', obj.window.id);
                
                
                ef = false;
                fontins = ceil(obj.font.fontsize * obj.window.scalefactor);
                obj.talk([count length(iStr)],'pagenumber',fontins);
                
                switch ev{count}
                    
                    case 'blank' % blank screen
                        obj.talk(iStr{count},'instructions', fontins);
                        obj.talkAndflip([],'pageturner', fontins);
                    case 'exampleplay1'
                        Screen('FillRect',obj.window.id,[0 0 0]);
                        Screen('Flip',obj.window.id);
                        nnn = 100;
                        pgb.flush(100);
                        pgb2.flush(100);
                        g = 1;
                        while ~pgb.isstop
                            obj.runtrial(g);
                            g = g + 1;
                            if g > 5
                                g = 1;
                            end
                        end
                        obj.talk(iStr{count},'instructions', fontins);
                        obj.talkAndflip([],'pageturner', fontins);
                        
                end
                
                keyspace = KbName('space');
                if ismac
                    keybackspace = KbName('delete');
                else
                    keybackspace =  KbName('backspace');
                end
                % press button to move on or not
                if ~ef
                    flag = 1;
                    while flag
                        [KeyNum, when] = obj.waitForInputrelease([keyspace keybackspace],Inf);
                        
                        switch KeyNum
                            
                            case keyspace % go forwards
                                count = count + 1;
                                if count > length(iStr)
                                    endFlag = true;
                                end
                                flag = 0;
                            case keybackspace % go backwards
                                ef = true;
                                count = count - 1;
                                if count < 1
                                    count = 1;
                                end
                                endFlag = false;
                                flag = 0;
                            otherwise
                                flag =1;
                        end
                    end
                end
            end
            WaitSecs(0.1);
        end
        function [ev, iStr] = instructionList(obj)
            i = 0;
            % instructions without sound
            i=i+1; ev{i} = 'blank';      iStr{i} = 'Welcome! Thank you for volunteering for this experiment. \nIn the next hour you will be playing a series of games competing against an opponent to get as many points as you can as fast as possible. ';
            i=i+1; ev{i} = 'blank';      iStr{i} = 'The game is modeled after the "one-arm bandits" slot machines that are popular in casinos and they will look like this';
            i=i+1; ev{i} = 'blank';      iStr{i} = 'Every round, you will choose the bandit that you think has the highest reward?the bandits will be highlighted green before you make your choice, and blue once you choose';
            i=i+1; ev{i} = 'blank';      iStr{i} = 'After you and your opponent have both made your choices, the reward value will be revealed and your progress bar will fill up. \nA new game will start if either your or your opponents progress bar reaches 300 points';
            % i=i+1; ev{i} = 'blank';      iStr{i} = '';
            % i=i+1; ev{i} = 'blank';      iStr{i} = '';
            % i=i+1; ev{i} = 'blank';      iStr{i} = '';
            i=i+1; ev{i} = 'blank';      iStr{i} = 'So ... to be sure that everything makes sense let''s work through a few example games ... \n Press the left arrow key (<-) to play the left bandit \n Press the right arrow key (->) to play the right bandit';
            i=i+1; ev{i} = 'exampleplay1'; iStr{i} = 'Great job! Now you know the rules!';
            i=i+1; ev{i} = 'blank';      iStr{i} = 'We want to see how well two human beings can do in this task, try your best to get as many points as you can!';
            i=i+1; ev{i} = 'blank';      iStr{i} = 'Press space when you are ready to begin. \nGood luck!';
        end
    end
end